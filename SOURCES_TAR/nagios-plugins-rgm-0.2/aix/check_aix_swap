#!/usr/bin/perl
############################## check_snmp_mem ##############
# Version : 0.9
# Date : Jul 20 2005
# Author  : Patrick Proy (patrick at proy.org)
# Help : http://www.manubulon.com/nagios/
# Licence : GPL - http://www.fsf.org/licenses/gpl.txt
# TODO : snmpv3
#################################################################
#
# Help : ./check_snmp_mem.pl -h
#

#use strict;
use Net::SNMP;
use Getopt::Long;

# Nagios specific

use lib "/srv/eyesofnetwork/nagios/plugins";
use utils qw(%ERRORS $TIMEOUT);
#my $TIMEOUT = 15;
#my %ERRORS=('OK'=>0,'WARNING'=>1,'CRITICAL'=>2,'UNKNOWN'=>3,'DEPENDENT'=>4);

## SNMP Datas

# IBM AIX

my $aix_swap_pool		= "1.3.6.1.4.1.2.6.191.2.4.2.1";		# IBM-AIX-MIB::aixPageEntry
my $aix_swap_name		= "1.3.6.1.4.1.2.6.191.2.4.2.1.1";		# IBM-AIX-MIB::aixPageName
my $aix_swap_total		= "1.3.6.1.4.1.2.6.191.2.4.2.1.4";		# IBM-AIX-MIB::aixPageSize
my $aix_swap_percent_used	= "1.3.6.1.4.1.2.6.191.2.4.2.1.5";		# IBM-AIX-MIB::aixPagePercentUsed
my $aix_swap_status		= "1.3.6.1.4.1.2.6.191.2.4.2.1.6";		# IBM-AIX-MIB::aixPageStatus
my $aix_swap_index		= "1.3.6.1.4.1.2.6.191.2.4.2.1.8";		# IBM-AIX-MIB::aixPageIndex

# Memory
# check_snmp_storage.pl -C <community> -H <hostIP> -m "^Real Memory$"  -w <warn %> -c <crit %>

# Globals

my $Version='0.9';

my $o_host = 	undef; 		# hostname
my $o_community = undef; 	# community
my $o_port = 	161; 		# port
my $o_help=	undef; 		# wan't some help ?
my $o_verb=	undef;		# verbose mode
my $o_version=	undef;		# print version
my $o_netsnmp=	1;		# Check with netsnmp (default)
my $o_cisco=	undef;		# Check cisco router mem
my $o_netscreen=undef;		# Check netscreen memory
my $o_hp=	undef;		# Check hp procurve mem
my $o_warn=	undef;		# warning level option
my $o_warnR=	undef;		# warning level for Real memory
my $o_warnS=	undef;		# warning levels for swap
my $o_crit=	undef;		# Critical level option
my $o_critR=	undef;		# critical level for Real memory
my $o_critS=	undef;		# critical level for swap
my $o_perf=	undef;		# Performance data option
my $o_timeout=  5;             	# Default 5s Timeout
my $o_version2= undef;          # use snmp v2c
# SNMPv3 specific
my $o_login=	undef;		# Login for snmpv3
my $o_passwd=	undef;		# Pass for snmpv3

# functions

sub p_version { print "check_snmp_mem version : $Version\n"; }

sub print_usage {
    print "Usage: $0 [-v] -H <host> -C <snmp_community> [-2] | (-l login -x passwd)  [-p <port>] -w <warn level> -c <crit level> [-I|-N|-E] [-f] [-t <timeout>] [-V]\n";
}

sub isnnum { # Return true if arg is not a number
  my $num = shift;
  if ( $num =~ /^(\d+\.?\d*)|(^\.\d+)$/ ) { return 0 ;}
  return 1;
}

sub round ($$) {
    sprintf "%.$_[1]f", $_[0];
}

sub help {
   print "\nSNMP Memory Monitor for Nagios version ",$Version,"\n";
   print "(c)2004 to my cat Ratoune - Author: Patrick Proy\n\n";
   print_usage();
   print <<EOT;
-v, --verbose
   print extra debugging information (including interface list on the system)
-h, --help
   print this help message
-H, --hostname=HOST
   name or IP address of host to check
-C, --community=COMMUNITY NAME
   community name for the host's SNMP agent (implies SNMP v1 or v2c with option)
-2, --v2c
   Use snmp v2c
-l, --login=LOGIN
   Login for snmpv3 authentication (implies v3 protocol with MD5)
-x, --passwd=PASSWD
   Password for snmpv3 authentication
-P, --port=PORT
   SNMP port (Default 161)
-w, --warn=INTEGER | INT,INT
   warning level for memory in percent (0 for no checks) 
     Default (-N switch) : comma separated level for Real Memory and Swap 
     -I switch : warning level
-c, --crit=INTEGER | INT,INT
   critical level for memory in percent (0 for no checks)
     Default (-N switch) : comma separated level for Real Memory and Swap 
     -I switch : critical level
-f, --perfdata
   Performance data output
-t, --timeout=INTEGER
   timeout for SNMP in seconds (Default: 5)
-V, --version
   prints version number
EOT
}

# For verbose output
sub verb { my $t=shift; print $t,"\n" if defined($o_verb) ; }

# Get the alarm signal (just in case snmp timout screws up)
$SIG{'ALRM'} = sub {
     print ("ERROR: Alarm signal (Nagios time-out)\n");
     exit $ERRORS{"UNKNOWN"};
};

sub check_options {
	Getopt::Long::Configure ("bundling");
	GetOptions(
		'v'	=> \$o_verb,		'verbose'	=> \$o_verb,
		'h'     => \$o_help,    	'help'        	=> \$o_help,
		'H:s'   => \$o_host,		'hostname:s'	=> \$o_host,
		'p:i'   => \$o_port,   		'port:i'	=> \$o_port,
		'C:s'   => \$o_community,	'community:s'	=> \$o_community,
		'l:s'	=> \$o_login,		'login:s'	=> \$o_login,
		'x:s'	=> \$o_passwd,		'passwd:s'	=> \$o_passwd,
		't:i'   => \$o_timeout,       	'timeout:i'     => \$o_timeout,
		'V'	=> \$o_version,		'version'	=> \$o_version,
		'2'     => \$o_version2,        'v2c'           => \$o_version2,
		'c:s'   => \$o_crit,            'critical:s'    => \$o_crit,
		'w:s'   => \$o_warn,            'warn:s'        => \$o_warn,
		'f'     => \$o_perf,            'perfdata'      => \$o_perf
	);
	if (defined ($o_help)) {
		help();
		exit $ERRORS{"UNKNOWN"};
	};
	if (defined($o_version)) {
		p_version();
		exit $ERRORS{"UNKNOWN"};
	};
	if ( ! defined($o_host)) { # check host and filter 
		print "No host defined!\n";
		print_usage();
		exit $ERRORS{"UNKNOWN"};
	}
	# check snmp information
	if ( !defined($o_community) && (!defined($o_login) || !defined($o_passwd))) {
		print "Put snmp login info!\n";
		print_usage();
		exit $ERRORS{"UNKNOWN"};
	}
	# Check Warning and crit are present
	if ( ! defined($o_warn) || ! defined($o_crit)) {
		print "Put warning and critical values!\n"; 
		print_usage();
		exit $ERRORS{"UNKNOWN"};
	}
	# Get rid of % sign
	$o_warn =~ s/\%//g; 
	$o_crit =~ s/\%//g;
	if ( isnnum($o_warn) || isnnum($o_crit)) {
		print "Numeric value for warning or critical !\n";
		print_usage(); 
		exit $ERRORS{"UNKNOWN"};
	}
    	if ( ($o_crit != 0) && ($o_warn > $o_crit) ) {
		print "warning <= critical ! \n";
		print_usage(); 
		exit $ERRORS{"UNKNOWN"};
	}
}

########## MAIN #######

check_options();

# Check gobal timeout if snmp screws up
if (defined($TIMEOUT)) {
  verb("Alarm at $TIMEOUT");
  alarm($TIMEOUT);
} else {
  verb("no timeout defined : $o_timeout + 10");
  alarm ($o_timeout+10);
}

# Connect to host
my ($session,$error);
if ( defined($o_login) && defined($o_passwd)) {
  # SNMPv3 login
  verb("SNMPv3 login");
  ($session, $error) = Net::SNMP->session(
      -hostname   	=> $o_host,
      -version		=> '3',
      -username		=> $o_login,
      -authpassword	=> $o_passwd,
      -authprotocol	=> 'md5',
      -privpassword	=> $o_passwd,
      -timeout          => $o_timeout
   );
} elsif (defined ($o_version2)) {
     # SNMPv2 Login
	 ($session, $error) = Net::SNMP->session(
	-hostname  => $o_host,
        -version   => 2,
	-community => $o_community,
	-port      => $o_port,
	-timeout   => $o_timeout
     );
} else {

    # SNMPV1 login
    ($session, $error) = Net::SNMP->session(
       -hostname  => $o_host,
       -community => $o_community,
       -port      => $o_port,
       -timeout   => $o_timeout
    );
  }

if (!defined($session)) {
   printf("ERROR opening session: %s.\n", $error);
   exit $ERRORS{"UNKNOWN"};
}

# Global variable
my $resultat=undef;

# Get IBM-AIX-MIB::aixPageEntry table
$resultat = (Net::SNMP->VERSION lt 4) ?
		$session->get_table($aix_swap_pool)
		:$session->get_table(Baseoid => $aix_swap_pool);
if (!defined($resultat)) {
	printf("ERROR: Description table : %s.\n", $session->error);
	$session->close;
	exit $ERRORS{"UNKNOWN"};
}

my (@oid,@index)=(undef,undef);
my $nindex=0;
foreach my $key ( keys %$resultat) {
	verb("OID : $key, Desc : $$resultat{$key}");
	if ( $key =~ /$aix_swap_index/ ) {
		@oid=split (/\./,$key);
		$index[$nindex++] = pop(@oid);
	}
}
  
# Check if at least 1 paging space exists, using IBM-AIX-MIB::aixPageStatus
if ($nindex == 0) { 
	$c_status = "WARNING";
	$c_output = $c_status .": No paging space found";
	$session->close; 
	print "$c_output \n";
	exit $ERRORS{$c_status};
}

my $c_status="OK";
my($c_output,$c_foutput,$prct_free)=(undef,undef,undef);
my $output=undef;
my $foutput=undef;
my $nactive=0;
my ($used,$free,$total)=(0,0,0);
foreach (@index) {
	#  Check if the paging space is active.
	#  Values are : 
	#  	1 = "active"
	#  	2 = "notActive"
	#  We set "notActive" because of aixmibd seem to give false status.
	#if ( $$resultat{$aix_swap_status . "." .$_} == 1) { 
		$nactive++; 
		
		$c_output .= ", " if defined ($c_output);
		$prct_free = 100-$$resultat{$aix_swap_percent_used . "." .$_};
		$used = $$resultat{$aix_swap_percent_used . "." .$_};	
		$c_output .= $$resultat{$aix_swap_name . "." .$_} .": ". $used ."%";
		$free = ($prct_free*$$resultat{$aix_swap_total . "." .$_})/100;
		$total = $free+$used;
		verb("Used : $used, Free: $free, Output : $c_output");
		
		if (($o_crit!=0)&&($o_crit <= $used)) {
			$c_output .= " > " . $o_crit ;
			$c_status="CRITICAL";
		} elsif (($o_warn!=0)&&($o_warn <= $used)) {
			$c_output.=" > " . $o_warn;
			$c_status="WARNING";
		}

		if (defined ($o_perf)) {
			$c_foutput .= " " if defined ($c_foutput);
			$c_foutput .= "page_space_". $$resultat{$aix_swap_name . "." .$_} ."_used=" . $used."%;";
                        $c_foutput .= $o_warn.";";
                        $c_foutput .= $o_crit.";";
                        $c_foutput .= "0;100" ;
			#$c_foutput .= ($o_warn ==0)? ";" : round($o_warn * $total/100,0).";"; 
	 		#$c_foutput .= ($o_crit ==0)? ";" : round($o_crit * $total/100,0).";";
			#$c_foutput .= "0;" . $total ;
		}
	#}
}

# Check if at least one paging space is active
if ($nactive == 0) { 
	$c_status = "WARNING";
	$c_output = $c_status .": No paging space active";
}

$c_output .= " ; ".$c_status;
$c_output .= " | ". $c_foutput if (defined ($o_perf));
$session->close; 
print "$c_output \n";
exit $ERRORS{$c_status};

